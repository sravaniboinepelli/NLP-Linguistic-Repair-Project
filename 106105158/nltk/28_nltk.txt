so welcome to the second lecture of this week so we had started for our dependency parsing formulation and we define what is the problem and what are the very ah formal conditions on a dependency graph in the last lecture so we are given a input sentence i want to obtain a dependency graph for that sentence and further if we discuss that there are certain ways we can handle this problem and in this course we will mainly focus on the approaches that you just that use some sort of labeled data for this task so it will be some sort of machine learning task for finding out the dependency paths for a new sentence so now so in the in the next four lectures in this week i will cover two different methods for the same problem but before discussing the methods in detail let me try to give you a basic intuition on what we are trying to achieve and this will also help you to understand that if you are given a new problem and you want to take it in a machine you want to solve it in a machine learning based method then how you should go about it ok so so let me take this case so i have a sentence that contains some words ok this is some arbitrary sentence this is a new sentence i might not have seen it before and my goal is to come up with the dependency graph ok these are nodes are different words and they have certain relations r one r two etcetera are certain relations ok this is my dependency graph so i want to go from the sentence to my dependency graph now suppose i want to do it in a in some sort of systematic manner by using some sort of data so what i will do i will try to convert that to some sort of configuration format ok some initial configuration so that means there will be a function that will take any sentence as input and convert that to initial configuration now i will define some operations that i can make on this initial configuration ok and that will take me to some intermediate configuration and i should be able to keep on doing this operations until at some point of time i arrived at a terminal configuration and terminal configuration should be something that resembles a dependency graph ok so my whole task is now starting from the input sentence converted to a initial configuration apply some well defined operations and go to intermediate configuration until you finally reach a terminal configuration that may be deterministic may not be deterministic so now so this is my whole thing this is my sentence and this is my dependency graph and operations are something i do not know but i need to define i need to find out for a particular configuration what are the operation that i should take now where does machine learning comes in here so this looks like very deterministic what is the problem the problem is they may not be a single operation so i should have a way to find out for the given configuration what is the operation that i should take and that i am trying to learn from the data that i have so that's where the machine learning comes in so we have data where we have a set of sentences and their corresponding dependency graphs ok so there i can find out for what configuration what was the operation that i had taken and i will use that to learn for a new sentence or a new configuration what operation i should be taking so that given any new sentence i can actually find out it's dependency graph and this is just generic idea we will see specifically how it will be used in the two different methods that we will cover in this course so now the first method that we are going to cover is a transition based parsing method ok so so we will see it's formulation so what is the basic idea so it's similar to the intuition that i had provided earlier that is i have to derive a a single syntactic representation it's called the dependency graph via a deterministic sequence of elementary parsing actions and this is what we were saying as operations i start with the sentence i keep on having certain operations over that until i i arrive at some dependency graph so now in this particular case of transition based parsing what what do i mean by a configuration what do we mean by a configuration look like so a configuration i will need a triple that is s stack buffer and a set of arcs so that is at any point i can define a configuration in the configuration i will have a stack where there will be some set of words that has been partially processed then the buffer it will contain words that are remaining and whatever arcs i have already obtained via my ah operations this will be in the set of arcs so at the bottom of this slide you are seen one example of a configuration so this is for the sentence he sent her a letter so this is the intermediate configuration where you have the words sent her a in the stack so you are partially processed at this point the word letter and punctuation are in the buffer they are remaining and there is already an arc between the words he and sent and he is the subject of the word sent the verb sent so this is the intermediate configuration now how do i formally define my whole transition system so formally so it will be very analogous to what i started discussing ok so i need to define what are my possible configurations how do i go from a sentence to an initial configuration and which configuration will i call as a final configuration and what are the operations i should make so that i can transit from one configuration to another configuration and that's why the name of transition system also comes in so then formally we will define dependency parsing transition system as a quadruple that has c t c s and c t and what are these capital c is a set of configurations all the configuration that are possible now capital t denotes a set of transitions and each transition takes me from one configuration to another configuration from c to c one configuration in the set c to another configuration in the set c now c s will be an initialization function that you will give a sentence as input and you will find the initial configuration as output and then you will have a set of terminal configurations so that means whenever you reach a terminal configuration via your operations you will stop anyway call it as your dependency graph now whenever you are given a sentence x what is my transition sequence so it's sequence will be a set of configurations it's starting from c zero to c m and what are the conditions on those c zero is something that you can derive from the sentence ok so suppose x is the sentence that you are giving as a input and you want to find out it's dependency graph so now what is the idea you have a function initialization function you have apply that function over x and you get a transition sorry you get a configuration c zero now you keep on applying various operations and get c one c two up to c m and c m is in the set of terminal configurations ok this is my initialization function set of terminal configurations and c zero to c m all are in the set of configurations and what is the relation between any two conjugative c i and c i plus one relation would be i can obtained c i plus one by making a transition over c i ok for some transition i have defined in my set capital t so this is my process it starts with the sentence apply the initial initialization function get the initial configuration keep on applying by a various transitions until you obtain a terminal configuration ok now as per the transition system that we have defined what will be the initialization initialization will be simple so i have to define what is my s stack what is my buffer and what are my arcs because whenever when i am starting with the sentence w one to w n ok initially my structure contain the set of partially processed words so there is nothing that is processed right now so my stack will be empty my buffer should contain the set of remaining input words so remaining words are all the words w one to w n and my arc should contain whatever dependency relation i have already found so it will be empty this will be empty set so this is my initialization now what will be the terminal configuration a termination so the idea is i should not have any words remaining in the buffer so my buffer should be empty so terminal condition i can define as stack would have some may or may not some words buffer should be empty and i will have obtained a set of arcs so this is important my buffer should be empty a stack may or may not contain some words and arcs will have some dependency relations already so now once you know what is my initial configuration what is my termination condition now what is remaining in this ah in this whole thing we know all the possible set of configurations so what is remaining is what are all all the possible transitions that i can take for going from one configuration to another configuration how can i move from initial configuration by a sequence of operations so that i arrive at a terminal configuration ok so now in this system there are four transitions that have been defined ok so that means for any configuration you can take one of these four four transitions so in this slide i am showing you the four transitions different transitions that you can take so how you should read it so in the left the names of the transitions left arc right arc for a dependency d reduce and shift these are the four transitions possible now for each transitions like left arc you will have what is the configuration that is the input to that of with which you are starting on top and what is the configuration that you will end up with a starting from this configuration if you apply a left arc what configuration you will arrive at and finally in the right if there is something that is a condition what is the condition under which you can apply this transition this is just a necessary condition you need to have this conditions satisfied to be able to apply this transition so for example if i see the left arc transition what does it say it says that i can apply it when there is stack contain some words and i have been shown here the last word in the stack i can also call it the top of this stack the word is s i buffer contains some words w j it is starting from w j top of buffer is w j and i have some set of arcs now what do i mean by left arc left arc means i making a transition from w j to w i yes this is the left arc because the words are occurring in the in the same order that they occur in the sentence so there is a arc from w j to w i so what is the head here w i is the head and dependent is sorry w j is the head and w i is the dependent ok so now there is also a condition here w i should not already have a head and let us try to understand this condition so what am i saying my stack contains some words and and top is w i buffer contains some words starting from w j and i making a left arc so the left arc as the name says it will be from buffer to s stack and we are we have always operating on the top words in buffer and stack so i making an arc from the top word in buffer to the top word in s stack this is the left arc now what is the condition condition is w i should not already have a head now why is this condition just see here i am if i am making this transition we are saying that the w j is the head of w i now if w i already has a head i cannot apply this why can you see what what particular condition in dependency parse does it violate so dependency parse has a single head constraint ok so it is a single head constraint so that says each word can have at most one head so if w i already has a head then i cannot apply this particular transition ok so that is left arc can be applied only if w i does not already have a head now suppose if i apply a left arc now i start with a configuration like that what is my real thing configuration so real thing configuration would be i will remove w i from the s stack ok it will contain all the words except w i buffer will remain as it is and my arcs will be i have got a new arc what is that w j dependent each w this is my new arc ok so i have removed w i from my s stack now you might have this question ah why am i removing w i from the s stack if the word is removed i cannot put it back so i can remove a word from the s stack only if i am sure that all it's relations have already been captured now so the question here is can this word w i have anymore relations with any words so if w i has any relation with the words that occurs before w i it would already have been captured at this point because these are already partially processed words so the only relation w i might have is with any words after w j now let's take a scenario take a word a w k ok now what kind of relation w i might have with w k it can be either an incoming arc or it can be an outgoing arc ok now can it can have an incoming arc from w k it cannot yes because it can have only one single one head so this is not possible now what is the other condition that can it have ah outgoing arc to some word w k now what do you think about it is that possible now if you think again about the formal conditions that we are defined what condition is it violating remember the condition on projectivity if there is a relation from j to i then from i the next dependent can be only on this side of j it cannot be on that side of j ok so this has to be either in between that is not possible or here ok so so this is also not a possibility so that means w i cannot have any further relations so that's why we can remove w i from the s stack and this my s stack and this contain everything other than w i buffer remains the same now let us look at the ah second transition right arc so now right arc is you are making a relation from w i to w j w i is the head and w j is the dependent there is no conditions that you have to see here and when you apply this particular transition what do you obtain w j goes to the s stack so i do not remove w i and w j goes to the s stack and i get a new arc ok so now again you can try to think here why we didn't remove w i from the s stack ah why we didn't remove w j from the buffer and remove it all together why we are not doing that and try to think in terms of the constraints that we are put over our dependency parsing ok and we will come up with some nice ah intuitions that why we are defining the transitions in this particular manner so we have seen we have seen the justification for the previous case now try to justification for yourself for this case but here the the difference is that now the transition is from w i to w j and accordingly i am getting a new arc then we have two more transitions reduce and shift what is reduce in reduce i remove the the top word from the s stack and the condition is w i already has a head if w i already has a head i can remove that and finally the fourth transition is shift what is that i take the top word on the buffer and shift it to the top of s stack and these are the four transitions now the the main thing here is when you are at a particular configuration you might be able to take more than one of these operations or transitions and your task could be to find out what is the transition that i should take in a particular scenario so i hope the four transitions are clear ah let us see a particular example and how we do apply these transitions so we will take a very simple example so what we will have we will have a sentence he sent her a letter and we also know the dependency parse of this sentence now once you are given the sentence and it's actual dependency parse that you want to obtain you have to find out what are the transitions that i should that you should be taking at each intermediate or initial configuration so that you can end up with the dependency graph so let us do this exercise so here this is my sentence he sent her a letter and there is also a punctuation mark how do we start find out what is the initial configuration now how do we convert this sentence to the initial configuration s stack would be empty buffer would contain all the words and arcs would be empty and that is what initial configuration s stack is empty buffer contains all the words and arcs is empty now your task is starts this is the initial configuration now what is the transition that you must be taking here so so this one is relatively easy i cannot do left arc left arc means say arc from he to a word in s stack there is no word in s stack they cannot be any dependency relation similarly right arc is not possible because there is no word on the top of s stack i cannot be reduce because again there is no word in the on the top of s stack so the only transition possible is shift i can take the top word in the buffer and move that to to the stack and this is what i will do i will take the transition as shift so if i do right how do i modify my configuration so if i do a shift he will go from buffer to the s stack and that is what i will obtain now now this is my configuration now again you defined out what is the transition that he must be taking at this point and that's where you will look at the dependency graph that you want to obtain and you will see is there any relation you want to establish between the top of s stack and top of buffer so in the parse we are seeing he is a subject for sent that means you can establish a relation between sent and he and what will be that it should be from sent to he so it should be a left arc relation so that means i can take a left arc transition at this point and if i take a left arc what will be the output configuration i will remove he from the s stack buffer will remain as it is and arcs i will get one more arc and that is what is my next configuration s stack is empty buffer contains the remaining words and i have one arc obtained now you are at this configuration now what is the transition you should take again whenever stack is empty the only transition possible is shift so i will do a shift ok now i have one word in the in that stack sent and there are some word in the buffer her a and letter now what is the transition you can take at this point again you will try to have a look at the dependency parse you will see if this is relation between sent and her yes her is a dependent and sent is a modifier sorry sent is the head so what is this transition from sent to her it will be a right arc so i will take a right arc transition and what will be the output of the right arc the word her should go the s stack and i will get a new relation in my arcs so this will be my configuration at this point i have the words sent and her in the s stack a and letter in buffer and i got the arcs now am i at the point where i have some words in the s stack i have some words in the buffer and now i have to see what is the transition i should be taking care so let us have a look can i take a left arc or right arc you see her and a are not related in my dependency parse so i cannot take left arc or right arc now what are the possibilities the possibilities are i can either take a reduce or shift these both are possible now how do i choose between reduce and shift and there is a rule of thumb for choosing between rule shift and reduce and the idea is if you find the danger word in the stack not on the top just they were before the top any words before the top of the s stack that connects to that word on the top of the buffer you do reduce otherwise shift of course you can do reduce only if you have already found the head for their word so in this case should i take reduce or shift let us take this this rule of thumb is there a word in the stack below her that connects to the top of buffer there is not so i cannot take reduce i should take shift so if i do shift that is what i get i take a shift i now have sent her a letter now once i made this configuration what is the next transition i will take this time it is easy there is a relation between letter and a this should be left arc left arc means i removing so now again i am here there is no relation between her and letter so now so that means you can choose between reduce and shift so use the rule of thumb again is there a word below the top in the stack that connects to the top of buffer and you will see yes the word sent in the s stack connects to the word letter in the buffer so here you can do reduce and you do reduce and you have the word sent in the s stack and letter and punctuation in the buffer now is there any relation yes there should be a right arc relation so right arc means letter will go to the s stack yes again there is no relation between letter and dot the punctuation what should i take is there relation between any other word in s stack with the buffer yes sent and punctuation are related so i will do a reduce here now sent and punctuation are related by right arc and by right arc i will take the dot to the s stack ok and this is my configuration now what do you see should i go any further ah once i have reach this configuration and you will say no because what is the condition terminal configuration the condition is that my buffer should be empty so at this point my buffer is already empty so that means i have arrived at a terminal configuration and that's where i i will stop and i have obtained all the possible set of arcs for this sentence so now this is an example we have seen just to understand how to take all these transitions but ah does that help you to solve this problem whenever you are giving a new sentence why a new sentence i mean you do not know dependency graph or or you might also ask if i already know the dependency parse for a sentence what is the need for doing all these transitions and that's where the the concept of learning will come into picture so we have seen here if we know the dependency graph we can choose the configurations ok at run time whenever i am given a sentence my whole task is to find out what are the transitions i should be taking at different configuration and this i will learn from my already labeled data and this is what we will discuss in detail in the next lecture that is how do i use how do i use this concept to define it as a learning problem and for a new sentence how do i come up with a dependency graph thank you