hello everyone welcome to the first tutorial session for the natural language processing course so in this tutorial sessions we will be seeing how to set up the programming environment for the course and how to use it to solve your assignment problems so we will be using python as our default programming language and we will using jupyter as our default programming environment so if you are already comfortable with a particular programming language or an environment it is perfectly fine that you use one of those but if you feel that you will be requiring our assistance it is recommended that you use python and jupyter so let us see how to install a programming environment so what i will suggest is that you can go to google and type anaconda python so anaconda is a package that gives you the programming language programming environment and all other necessary packages required to run your course so you can see that the first link here which is the anaconda package leads you to the download page so the we get here we can go to the menu and see the download link is up here for installation we can look into the packages here as we can see the package is available for different operating systems and we recommend that you go with the python two point seven version so depending on your you can install the sixty bit installer or the thirty two bit installer so if you are working on osx or linux where installers are available here we recommend that you install that version and go to the particular director where the package is downloaded and run your dash command to execute this particular package command line installer will take you through and it show you how to install the package for the windows the graphical installer is available and you can download it by clicking on this particular link as i have already have the install version available with me i will be showing you a step by step process of how to install this set up so if you have space constraint you can cry the minimal package called as miniconda otherwise it is advisable that you go with the current installation which is anaconda so here is the installation package and ah you can go to a step by step process and yes it ask for two separate ways of installation if you dont have admin privileges in the particular system you are installing you should be selecting this one just for your particular use and you can define why you are package should be install and make sure you have at least two gb of free space available in your system since just that i have already a package install so i will be just showing you how to install it to on a separate folder and i just you have to just make sure this are ticked and click on the install button so the install will take somewhere around fifteen to twenty minutes to complete and once its complete you will be able to see the anaconda package in your programs and once you click here we can see different packages installed where you should be selecting jupyter notebook so jupyter notebook is a programming environment that runs from your browser so it has a server running at the back and i have an instance of jupyter already running in my browser so in it go with by default goes to your document folder and within the document folder it will show you where exactly your files are residing so as part of the assignment we will be providing you some help of files of which this is the particular programming file that you should be looking for so this is your programming environment so notebook is not just a programming environment it helps you keeps lot of things that you learn it helps you document the stuff that you basically go through so that you can refer it back so i will be using python as my language inside jupyter and python also tends to be my favorite calculator for example if you want to calculate just some values i can just see how multiplication of two values this may an answer so nine eight seven into five forty three will give me this particular answer now if i want to stop using my variables i can gives the values to the variables there is not type declaration as required we can just give a variables name so maybe i can give variable one and this will be variable two and c equal to variables one plus variable two and then i print the value for c now assuming i want since we will be we are studying about natural language processing we will be taking a lot of things and lot of textual data to handle we will how to stop text strings so if you have a variables you can just assume text strings enclosed with in quotes so here i have typed hello and world and i do the plus operation to both the variables let see what happens so the particular variables strings hello world together which means it concatenation in a both the variable so this automatic identification whether the sum needs to be done or concatenation needs to be done this handled by the python interpreter suppose if i change and i say hello mook lets say how with becomes yes so the output given here basically shows hello mook similarly a variable initialized at a particular cell can be reused at an another cell as it resides in your memory for example i reused the hello which is already there in which was already defined in the particular cell here and i use hello in nptel let see how it comes it works and important thing that you have to care of is indentation so when using conditional statements like the if or the loops like the for loop you have to make sure that the block indentation is maintained so what i want to check is that if a is equal to hello so i check for whether the variable a contains the variable hello then the variables are given the values one nine two otherwise the variables b and c are given the values ten and eleven let see which value gets print since the value a since the variable a has the value hello it prints one and two suppose i change it to nptel and execute it and now i run here so here i get the values ten and eleven so if you are still confused how to run the code after typing the code in the particular cell we can either use the short cut controlled and enter or you may go to this button and this will execute the code so let us change the variables values here and see if what happens if they enter code now be gets the values sixty and that gets printed here now suppose i am using a loop to print all the values between one and five that is one to four how do i do so i defined keyword four i define a variable and i define that the variable will be within a range from one to five if we can make it we can make it seven or any value of your choice and lets see so it prints all the values from one to six if i dont want to print it line by line i can just use a comma here and it gives me the values written in the same line so this is some basic syntax that that will let you coding python and we recommend that you go through some of the basic tutorials regarding python and some of the basic data structures that python has so that it will help in making ah coding experience mutch better so in order to provide that we will be providing you some links and some resources that you can go through and get with the particular code so as part of your assignment you are supposed to solve questions that involved edit distance that involves ah calculating the likelihood using bigrams and unigrams and i will be showing you how to handle this so as from the week two lecture one you might be aware of the concept called as edit distance so edit distance is a particular function that helps you compare two strings and find the similarity between them so the edit distance gives you the minimum distance between two strings and the minimum distance can be calculated in terms of the number of operations that required to change one string from to another and this is defined in terms of three operations insertion deletion and substitution so we have provided a function called ah levenshtein that helps you execute or calculate the edit distance so this is how functions are methods are used in python we use the keyword def followed by the name of the function and since i have two strings to come i give the strings as my function arguments that so that when you call the function you have to give which are the two strings to be given now these are the three operations the insertion deletion substitution that you will be using to compare both the strings so we need not worry about what exactly is happening inside you can think of It as a black box and you can just execute it but if you are curious you can obviously work around with it hack around with it and see how the output changes so assuming i already have the code setup and i already executed this particular cell so that the function goes to gets invoke now i call this function levenshtein and i give two strings which is hellp and hello and i want to see what will be the difference between the strings or what will be the edit operation edit distance it turns out that the edit distance is one which is being written by this particular variable here suppose i want to give yes it also gives the same values so if i have a new string the value changes as part of your assignment you have one question where you are supposed to solve the problems using jaro winkler distance jaro winkler distance is a variant of edit distance that is used to combine strings and we have provided the explanation of how to calculate the jaro winkler distance between two strings and you can read about more in the wikipedia link provided that for your convenience i have we have already implemented the jaro winkler as a function and we have stored it in the packages edit distance so we can call the jaro winkler function and you can again assume it to be black box just to solve your assignment so in jaro winkler as you can see the value ranges between zero to one and the so if two strings are exactly the same they will provide you the value of one and if they are complete different they will provide a value of zero so if i give the same string i get a value of one as my jaro winkler distance so this is very useful when it comes to ah combine strings such as person names because there are each variations in the person name that we use for example it is very common that the word vimal might be spelled as bimal depending on your demography so suppose we apply this function and let see how the string gets the value so the similarity between bimal and vimal turns out to be point eight six seven now let us see given a data set or a corpus of words and you want to find the most similar words of a given string from that how do we do that so you will be provided with a file called unigram dot csv you need to load that file and you have to ah so you have to so ah every line contains s single word or every unique word and the frequency with which it appears in a particular purpose so i read the file to the variable unigrams and unigrams will be store as a list there is a default data structure used in python you can ignore about list from the python manuals so for convenience you can think of it as an array where i if i want to access the first element i just give the index of the first entry which is zero and i print that well so the entry gives me foul for which has a frequency of one suppose i want to say the first ten entries in the file i will use the colon followed by number ten so it will give me all the numbers from zero to nine and that gives me the first ten entries which is foul which appears one time foul which appears three times and immature appears one times bringing appears one time now i will be using a different data structure called as dictionary that helps me separate the count and the word from one another so dictionary is as the name suggest we have a key where the key is your word and when i provide the key to the dictionary it will provide me the count with which it is appearing so here is the function that helps me and it stores the value inside the dictionary called as wordfreq so once i execute it so a dictionary has two entities one it is called as the keys and it has it made as a list of the keys so if you type wordfreq dot keys it will provide you all the keys that it has now if i want to know how many times thunder is appearing what i would do Is i would see the count of thunder by just giving the key as thunder to the variable wordfreq now it appears the it appears only once let us see how many times hanging is appearing and thats validate with the its coming out to be correct the its coming out to be correct as its four here and we already have checked it was four now since you know how to open a file how to store it in a dictionary and you already also know how to compare two strings let us see we can whether we can find similarity the most similar word to a given string or a given word so what i do is that i it trade through all the possible words in the dictionary and then i find the levenshtein distance between the string that i want to come here which happens to be tord it is a spelling mistakes so i have to which word be replaced with t o r d and if you see here i take each word from the keys of the dictionary and assign it to the variable item one at a time and i compare tord with item and i am going to print all the words that has a levenshtein distance which is less than or equal to one so if you fine tord well and good otherwise let us see what are the other words once it turns out there are five words which are similar to tord which is lord tore torn told or word let us see all the words which have a levenshtein distance of less than or equal to two when it turns out there are much more entries which have a leveneshtein distance of two with words now what will be doing either you are given with another file called the bigrams dot csf and it contains all the bigrams with the frequency with which the bigrams are appearing so this is very straight forward just like what we have done previously for unigram dot csv we are going to use the same set o f code if you see here i but here i have just written it in one lag so i have the bigrams file which i have read and i have spitted into a list then i define the dictionary called wordbigram and i store every bigram as my key and the count as the value so bigrams and unigrams as tord as now two different dictionary one is in wordfreq and other is in wordbigram now suppose i want to calculate the bigram likelihood as we know the formula is the count with which the bigram occurs by the count with which the first word in the bigram occurs so if i want to calculate the bigram likelihood of comeback i want in other frequency with which the comeback is occurring in a particular corpus and the frequency with which come is occurring and it turns out that the value is occurring ten times and come is occur one forty six times so if i want to calculate the probability of come back and come i would do wordbirgam come back divided by word frequency of come which will give me ten by one forty six it turns out that the value gives coming out to be zero so there is certainly a some problem the problems is that since both come the frequencies are individual values the system assumes the answer also should coming an integer but it turns out that the value is coming out to be a floating point number so to handle up there are different ways of explicit type casting what i am doing here is just multiply the value with a one point zero so that before the division occurs one of the value turns out to be a float so after the operation is done the value turns out to be point zero six eight now suppose we want to calculate the likelihood of the same bigram but using add one smoothing as we know add one smoothing basically adds a one to the numerator for the bigram likelihood and it also adds to the vocabulary size or the number of unique words in a corpus to get the number of unique words in a corpus we can just take all the keys in the dictionary and we can find the count of that and the number of keys and it turns out that the function length performs the same so i have used the length function to find all the length of the keys and with that i print the add one likelihood after add one smoothing and we can also see how many unique words are there in the corpus so this is pretty much ah for what you can do with your assignment two and there will be one question where you are suppose to modify the course in word for the particular operation so in that particular question you are suppose to change the value for substitution as insertion and deletion involve at cost of one but substitution involves a cost of two so in order to do that i am going to modify the value so what this particular function does is that it compares whether two characters at a position are same so if they were not same it returns a one because this is a logical operation otherwise it returns a zero so previously the cost was one so it was left as is now since the cost is two and just modifying it to be two here and let us see how much does it cost and how bimal and vimal compare with this operation and it turns out that the value becomes two this is generally done when to want to substitutions and you want to check more into the insertions and deletions operations and for some aspects you might require some external packages to be installed and i will be showing you how to install an external packages suppose i know their exist a package gensim and i assume that it is installed in this system i will invoke that external package using import gensim but it turns out that the package is not installed so anaconda comes with a default package manager which you can select using here anaconda navigator so anaconda navigator provides you all the different packages and it provides a reposit way of different packages that you can install alternatively you can create a new cell and you can install a package within the ah notebook itself what you have to do is that you have to mind this exclamation mark so you have type pip install gensim and this will also help you install the particular package but you can have in trouble with that you can by default go to the anaconda navigator and it will help you install the so i will just show you how to install this same and that will be the end of the tutorial session so here you can click on to the environment tab and you can see for all packages are reliable in the repository of anaconda and you can just type gensim and you can click here you can say electric and you can apply it to install as i was suggested you may alternatively use this command to install if you want to create a new notebook you should click on the new and you should go to we should select one of this so this will give me a new notebook where you can have a fresh notebook where you can try out code by yourself so this is pretty much thank you yeah