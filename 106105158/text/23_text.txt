 so welcome back for second lecture of this week so we had started our discussions on syntax so so in the last lecture we had talked about what is the formulation for doing the syntax parsing so we had talked about context free grammars now we will see how do we use context free grammars for the actual parsing so so let us take a simple grammar in in terms of in a c f g formulation so you have in the grammar it is said that a sentence can be a noun phrase followed by a verb phrase or an auxiliary followed by a noun phrase followed by verb phrase or single single verb phrase noun phrase can be a determiner followed by a nominal nominal can be a noun and so on so all the various possibilities are shown here and similarly these are all the pre terminals that are giving me terminals that are words in my lexical so this is one such grammar and now using this grammar i can write various sentences ok so for example i want to write the sentence the man read this book ok so i want to write this sentence the man read this book now how do i what kind of rules in the grammar do i use so that i can generate the sentence so i have to write the man read this book ok so let me just do it quickly on on the paper now the sentence can be a noun phrase followed by a verb phrase or an auxiliary followed by a noun phrase verb phrase or a verb phrase in this case it does not start with an auxiliary nor a verb so it has to be a noun phrase followed by a verb phrase so i have to first start by a noun phrase followed by a verb phrase ok and i will assume that the man will come in noun phrase and read this book come in verb phrase so what will be the next derivation so np have to get the man so i have to get something that says determiner nominal ok so so here i will say determiner nominal and verb phrase ok and determiner can can give me the a nominal can give me noun which can give the word man so in some steps i can determine to the nominal verb phrase the noun verb phrase ok and if i want to complete this i will say the man verb phrase now the verb phrase i have to derive read this book ok so verb phrase goes to verb and noun phrase is the something like that yes verb phrase goes to verb and noun phrase so i will use this and say the man verb noun phrase verb can directly give me read the man read noun phrase and from noun phrase i have to derive this book so i have to again write this determiner for a nominal this will become a determiner the man read determiner nominal and this will give me this and this will give me noun and this will give me book ok and that will give me the whole sentence the man read this book that's i derive a sentence using this grammar so now once i have this derivation i can use this derivation to denote what is the particular syntax tree that generalizes the sentence as per this grammar ok so same derivation can be used for to show the parse tree so this is my derivation and this derivation can be shown using this parse tree in the question of sentence you derived n p v p from n p you derived determiner and nominal v p verb and noun phrase noun phrase phrase to this particular sub trees ok so this is exactly what was the derivation that you did for the sentence in my grammar so that can immediately tell me what is the problem of parsing i am given the grammar and i am given the sentence in my language so given the sentence in my grammar i want to find out what is it's actual parse tree and they may not be unique parse they may be multiple parse tree so the process of parsing is to find out all the possible parse trees for a given sentence as per my grammar so so find out all the trees whose root is the start symbol s ok because i have to start with the start variable in my context free grammar and which cover exactly the words in the input ok now what are the constraints on which parsing suppose my sentence is book that flight so what are the constraint in my parse they should be three leaf nodes book that and flight and ms is you start at the start node and then i have to explore all the possible rules such that i come up with the tree is starting with us as the root node and book that flight as the only three nodes three leaf nodes ok so yes the tree must have one root the start symbol s and that tells me that i can explore it in at least two different ways one is i can with top down you start from s try to find out all the possible possible trees in finding out i can have as per my grammar and see if there is one tree that can give me the only the leaf nodes book that flight this is top down other approach is bottom up i start from book that flight go up words what are the non terminals and then see if any of this combination can lead to a full tree it starting from s ok so these are two different strategies and that's what we will discuss how do we use it top down or bottom up approach for parsing given this grammar so let's take this grammar so you have certain rules so left hand side is mainly the rules for ah non terminals and pre pre terminals and right hand side are for the lexicon pre terminals deriving the terminals ok now using this grammar you want to find out the parse for book that flight and we will use both the top down and bottom up strategies for for finding out this parse tree so yeah this is also what is the expected parse tree book that flight this is your whole verb phrase it's starting from a verb and a noun phrase so a book is a verb and and this that flight is a noun phrase ok so i want to come up with this parse tree given the grammar and how do i do that in a in a deterministic manner using the ah using my ah top down strategy so how do i start so i have to start from my so start node root node in top down and using my grammar as my grammar i will see what is the different possible rules i can apply at this point keep on going downwards ok so a start by assuming that the input can be derived by s then find out the trees that is start with s looking at the rules that are having on the left hand side because what are the all are different things that s can derive now when you are going downward in your tree once you obtain the part of speech category you will see if that matches the word in the leaf nodes if it is not matching you will go back and try out some other path ok and if there is any trees where the part of speech categories are not matching the the words at the leaf nodes you will get ok so now so let us see so i am starting with s ok now what is my first rule so what are the different rules from s so first rule is s can go to n p v p so what i will do i will try to explore that path s can got to n p v p now from np what is the next possible rule so next rule from n p is n p can give me a pronoun ok n p give me a pronoun again i will try to explore this further the pronoun give me the so pronoun will be the first word now pronoun is the pre terminal now what is the first pre terminal book so pronoun can never give me a book book is not a pronoun so so this part is not correct so i will go back from n p i will try to expose some other path ok so n p can also give me a proper noun so you see these are the rules in sequence in my grammar a n p can give me a pronoun n p can give me proper noun so again proper noun is a pre terminal that cannot give me a book so again i cannot accept this path so i will go back next rule is n p gives me a determiner followed by a nominal ok so again the first word has to be determiner that in the sentence but the first word is book that is not a determiner ok so again this path has to be this path is not correct now we see in the grammar there is no other rule that has n p on the left hand side ok so that means i have to now go back to the initial ah assumption that s will derive n p v p so i have to try out the next possibility as per my grammar the next possibility is s can give me auxiliary followed by noun phrase followed by a verb phrase ok so let me do that so s s is give me a auxiliary noun phrase and verb phrase again what is auxiliary auxiliary is a pre terminal that gives only does it does not give me book ok so again this part is not correct and auxiliary gives me anything else so again i go back and try out something else from s and the only remaining thing is v p so s gives me a v p ok now i will go to my grammar what are the rules from v p v p can give me a verb that is the first thing v p gives me a verb ok good now verb also gives me book that that matches there but what happens to the other two words in my sentence that flight verb gives me book but that flight is not covered in this tree so this is not a valid tree yes that flight there is no other no node starting from s that captures this this is again not a valid tree so i will try out something else with v p so next possibility is verb followed by n p ok verb followed by n p and verb gives me book well now from n p i have to get that flight now again from n p i can get pronoun pronoun cannot give me that yes then i can get proper noun it will also not give me that then i can from n p i can get determiner followed by a nominal ok and that is a determiner and from nominal i can go to noun and this can give me flight so that means by doing all these exploration systematically i can come up with a parse tree that starts from s and exactly covers these leaf nodes book that flight in my input so that is my top down parsing strategies ok so hope that is clear so we are given all the rules it starts from s and try to explore in some order you can take it you can try to explore in the same order that is in which they are given to you ok you might try to put them in the order in which they are actually used in in language so which one is more probable than other that is also ok but again you take can you see that this this requires a far too many steps right so you you are exploring paths that will probably never lead to the whole parse trees so this this this may need very certain space so we will try to ah take that problem that how we can avoid that so this is my a this was my top down parsing now what do i do in bottom up parsing in top up i start with s in bottom up i will start with my leaf nodes i will start with book that flight and i will try to go my tree upwards and see which one can give me if complete tree it is starting from s ok so the parser starts with the words of the input and tries to build trees from the words up by applying rules from the grammar one at a time and parser looks for the places in the parse in progress where the right hand side of the rule might fit ok in top down we were looking at always the left hand side if the current non terminal what is the rule in the left hand side so that accordingly i will i am trying to generate the right hand side here i am seeing what what in the right hand side i already have accordingly i select a rule in my grammar so so let's do this bottom up parsing so i have the sentence book that flight i will start by seeking what are the nodes in my grammar that can that can generate this ok so i start by say book and the first rule that their word book is noun ok then i go up to noun and say nominal gives me noun fine and nominal can gives me nominal followed by a noun so i am going my tree upward but now i i arrive at noun that is a pre terminal and noun will not give me that ok so that is not a noun so this is the inconsistency so i have to go back and see ok what is the next possible rule from nominal so i have to derive from nominal nominal followed by p p so rememberly we are seeing in which rule this occurs in the right hand side ok and accordingly i will take the the production nominal gives me nominal followed by p p now can can p p give me that flight so from p p so from that i i try to go go it upwards i see determiner determiner comes in right hand side of this rule n p gives me determiner nominal and flight again i grow it upwards it gives me noun a nominal can give me noun ok so this looks a nice tree but now can i attach p p to n p so s if i go n p upwards i will say ok s can give me n p followed by v p this creates a problem in that this verb phrase does not have anything in so it cannot take me to any leaf node ok so this is not valid if i go to this part can p p attached to n determiner and n p again there is no rule in my grammar that p p can be determiner followed by n p so i have to go back again try some other paths we have this is right hand side v p s s and determiner nomi[nal]- and noun noun phrase what can they give to me s again this does not work out so i try out something else with v p so i say v p gives me v p followed by a prepositional phrase again prepositional phrase does not give me determiner followed by a noun phrase this we will not work out again go one step down so earlier i was saying v p is deriving a verb now i am saying ok v p derives verb followed by an n p does that work yes if i can attach this v p to this verb and this noun phrase ok and then i can say that s can derive this v p and this gives me the whole parse tree so this is my bottom up strategy i start with the words in the leaf in the leaves try to grow them upwards by seeing what is the rule in my in my grammar where this occurs in the right hand side similarly i will see here and so on and finally can i build them as a single tree starting from s and that strategy finally gives me this particular tree so if we just try to compose this top down versus bottom up approaches so what do we see so what we were see in top down we were always seeing wherever this non terminal appears in the left hand side and i i immediately do the production so what happens that i can x i can always explore options that will never lead to the full parse ok i can always find options that will only give me one word but so so all the options were given me a parse is starting from s in in the top down strategy but it might happened that some options are giving me a particular parse tree where all the words are not covered or some extra words are covered ok so this actual correction the actual sentence is not taken care so in the bottom up it is the other way around so we are always seeing the words first you are exploring that those paths that are covering the whole sentence but it might happen that the the parse that you come up with is not a complete parse because it is not having a root at s ok so they may not be a full parse and there are ways to this specimen both top down and bottom up ok so you are seeing you are experiencing lot many parse that are probably not valuable and this depends on branching of my grammar in either direction ok so to avoid this problem and obtain an algorithm that works in polynomial time so you will use some dynamic programming approach ok so we have been using dynamic programming a lot in this course so we use that for edit distance then we use that for coding kind of algorithm now we will see how to use that for obtaining an efficient parsing algorithm so so idea is that can we cache some intermediate results instead of exploring all the different possibilities that are not relevant so by doing this caching i can obtain a polynomial time parsing algorithm for context free grammars ok and there are different dynamic programming algorithms that are both top down as well as bottom up and they can work in roughly order of n cube time where n is the length of the sentence number of words in my input string so what are the different approaches for dynamic programming parsing so one very popular algorithm is c k y algorithm that works in bottom up manner ok so you will do it for individual words then you are going to sequence of two words and so on up to you go to the whole six sentence and this is the only thing is that it requires some normalizing of the grammar that you will also see what is the normalization then there is earley parser that is again very popular that works in top down manner it does not require any normalization of grammar and slightly more complex than the c k y algorithm and a generic frame work is something called a chart parsers where ah for individual phrases in the sentence they will see what are the ah possible trees they were retain in the chart and use that for ah for the higher level trees ok so and they combined both both of these approaches bottom up and and top down so we will only focus on c k y algorithm that how do we use this for finding out parser in efficient polynomial time ok so how does this c k y algorithm works now before that we have seen that this requires normalization of grammar so what is that so to apply c k y algorithm so my grammar must be converted to a normal form called chomsky normal form ok and what is the constraint in chomsky normal form so the constraint is that all the production of my grammar should be having of should be having one of these two forms that is either exactly two non terminals on the right hand side or one terminal symbol on the right hand side so what do i mean by that in the context free grammars a rule is of the form a goes to gamma where a is a non terminal and gamma can be a sequence of terminals and non terminals this is general c f c production rule so what happens in the case of chomsky normal form the rules are constraint to be of these two forms a goes to b c all these are non terminals or a goes to small a small a is a terminal so left hand side is always the same it is only one non terminal in chomsky normal form what happens is that you put some constraints on the right hand side so it can have a either only two non terminals or only one terminal so to apply c k y algorithm i must convert my grammar in any generic context free grammar form to chomsky normal form ok so what are the steps involved they are what are ah necessary for our case so so we will also see that how do we store all the possible ah phrases what are their parses in a triangular table in the c k y algorithm so let me quickly see let me quickly show how we convert a grammar to chomsky normal form so in the left hand side we have a grammar ok and i want to convert that the chomsky normal form so can you quickly see go through the grammar and and find out the rules that are not in chomsky normal form so all these are one non terminal giving me a one terminal yes in all these cases so they are pre terminal to terminal they are always in chomsky normal form yes a non terminal giving me a single terminal now let me go upwards so p p gives me preposition followed by a noun noun phrase again one non terminal giving me two non terminals in c n f this is also in c n f this is also in c n f but this rule is not in c n f v p goes to verb one non terminal giving another non terminal so how do i actually convert this to chomsky normal form so idea would be i will find out what are the terminals that this derives so verb derives book include and prefer so instead of this rule i will add a new rule verb phrase gives me book include and prefer ok and this is the this is the strategy similarly here this is in c n f this is in c n f what about this rule nominal goes to noun again i will find out what are different things that noun derives book flight meal and money and i will add a rule nominal derives book flight meal and money this is in c n f so here again n p goes to pronoun i will find out pronoun goes to i he she me so n p gives me i he she me s goes to v p is again not in c n f so v p gives me verb and also verb n p ok so i have to add these rules s goes to verb n p s goes to v p n p s goes to preposition n p ok plus for v p going to be verb at now takes it next rule v p verb going to book include prefer and the rule i will add is s goes to book include and prefer s going to n p v p is fine but what do i do with this rule s goes to auxiliary n p and v p ok so for this kind of rule s goes to auxiliary n p v p where a single non terminal derives pre non terminals so what do i do i coin some new non terminals so i will say that auxiliary noun phrase together make a new terminals say x one ok so what will be my grammar it will be s goes to x one followed by v p and x one will be auxiliary followed by n p and this is equivalent to this rule and now this is in my chomsky normal form so idea is that whenever you have a rule where you have two more than two non terminals you try to break them down such that it is one non terminal another non terminal this you can again further break down if needed ok and this is a simple approach and if we have a rule like this a goes to b and b goes c you take this two a goes to small c this is a terminal ok and also if b has something else you need take care of everything in this yes that's what we took we saw in this particular example there so now if i convert this grammar to chomsky normal form this is how it will look like ok so you see that here s goes to v p now has multiple rules s goes to verb n p s goes to v p n p and s goes to book include prefer and so on for the other case also so in this lecture we had seen that how do we do a simple parsing using top down approach and bottom up approach but they are not very efficient so can we do something better by using dynamic programming parsing approach and for that we are trying we will be seeing ah c k y algorithm so how do you use c k y algorithm for an efficient parsing but c k y algorithm requires normalization ah to some chomsky normal form and we saw how do we convert a grammar to chomsky normal form so in the next lecture we will start with this chomsky normal form and see given a new ah given a string how do we parse that using c k y algorithm thank you