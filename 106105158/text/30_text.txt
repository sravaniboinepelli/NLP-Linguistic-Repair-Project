 welcome back for the fourth lecture of this week so in the last two lectures we had discussed a particular dependency parsing that was a transition based parsing method and we had discussed how we can formulate parsing as a particular particular problem where we starting with a initial configuration and moving from one configuration rather by using various transitions and we modeled or learned these transitions using some training data that we already had so this was a data driven approach now in this lecture we will talk about another data driven approach here so the one main difference from the previous one is that we do not assume that projectivity constraint over the dependency graph so in the last ah method that we had covered we were assuming that the dependency graph that we want should be projective although later on there are some variations proposed where this constraint is is not required so you might if you want to look into those so coming to what we are going to discuss in today's lecture and in the next lecture so this is the approach using where we are formulating dependency parsing as a problem of finding maximum spanning tree now what is the basic idea so we are starting with the sentence that is given to me so this is the sentence for which i want to find the dependency graph and how do we formulate the problem firstly think about the sentence as a set of nodes these are the words and assume that all the possible nodes are connected to each other we will also include a additional node called root so that we can find out what is the main head of this sentence now once we start by assuming all possible connections my problem is to find out what is the maximum spanning tree from this all all the connections that i can build and this i would assume corresponds to my dependency graph and the weights etcetera that will define for this graph will be learned by using some training data that will be available to me so the the main idea here is i am given a dependency graph so i start with a sentence john saw mary and i i assume an additional node like root assume that initially everything is connected so from root there are all possible connections to all that node and each node has an incoming and an outgoing edge with respect to every other node how do we learn these edge weights this is something that we will discuss but assume that the weights are already given to you now your problem would be how do i find out what is the maximum spanning tree from this graph and this suppose this is the maximum spanning tree then this is what i will assume corresponds to my dependency graph so my problem is starting from here to come up with the maximum spanning tree that might be dependency graph [vocalized noise] so now starting with some simple reminders from graph theory on what is a maximum spanning tree so ah you are now now familiar with what is a graph so when i say graph this is a set of v that is set of vertices and a set of arcs ok so arcs generally connect to different nodes in the graph and i so arc is connecting to nodes i and j both i and j are in the set v now if i talk about undirected graph like the figure on the left so if i say that i and j are in the set of arcs then j and i are also there there is no directions in this in this set of arcs but if i see that my graph is directed then if i and j are in the ah set of arcs then j and i may not be in the set of arcs ok like here i have a connection from this node to this node but no connection from this node to this node so now so we so what is a simple graph and directed and what is a directed graph directed graph can also be written as a digraph now we can also see what is a multi digraph a multi digraph what would happen between a set of vertices there might be more than one possible arcs like here you are seeing between this node and this node there are three different arcs so that's why you will have an additional ah index saying i j and k between the nodes i and j what is the kth arc ok so it's similar to the previous one except that between two vertices you can have more than one arcs now once we know what is a multi digraph let me define the notion of what is the directed spanning tree of the multi digraph so once i start with the multi digraph that is set of nodes v and there is a a sub graph g prime that is some v prime a prime is called a directed spanning tree if the following conditions are followed what are the conditions in the directed spanning tree the number of the set of nodes are the same as the set of nodes in the origin[al] original graph so i will have to take the all the nodes from the original graph ok so now what what do i do with the edges so the set of arcs that i take in g prime is the subset of the original set of arcs with the constraint that the number of edges that i have now is equivalent to number of nodes minus one ok and the third condition is the the graph g prime is a tree it's there is no cycle in the graph so let's take a example so i have two different multi digraphs that are given in the first and second figure and you are being shown a directed spanning tree for this multi digraphs so what do you see here so it has the same number of nodes as were there in the original multi digraph and what about the number of connections so you see there are one two three four and five connections and number of nodes are one two three four five six so number of connections are exactly number of nodes minus one and you can take any possible ah any possible five connections in among these nodes such that there is no cycle and it will called a directed spanning tree now once we know what is directed spanning tree we can also define what is a weighted directed spanning tree so here what we will do in my graph with all the arcs i will also associate a weight so each arc is now labeled or weighted by some numerical value and this i will call at w i j k for the i between the vertices i and j what is the weight for the kth arc so in w i j superscript k is the weight of the edge i j k now i will also define what is the weight of my directed spanning tree so this will be simply summation over the weights of all the edges in my directed spanning tree so from my multi digraph i find a directed spanning tree definition was already covered in the previous slide now whatever edges i am obtaining i will find out the weights for each of these and sum over them and that will define the weight of my directed spanning tree now the idea here is for a for a given starting from a given multi digraph you can obtain a number of different directed spanning trees so your problem is to find out which of these has the maximum weight so now i by this concept of weighted spanning tree i have also define what is the weight of the directed spanning tree so now among all the possibilities i will find out the one that is having the maximum weight so it's starting from the graph g let us say t g is the set of all the possible spanning trees that i can obtained so like this is this is an example this ah multi digraph is given and there are these four possible spanning trees so these are all directed spanning trees now i have to find out which of these has the maximum weight so this is my m s t problem finding the spanning tree g prime of the graph g that has the maximum weight and the weight is written simply as summation over the weights of all the edge of that graph ok so i find out all the edges of that graph sum over the weights and that will give me the weight of the final graph so now my problem is from my sentence whenever i construct a multi digraph that is all the possible connections a fix set of directed spanning trees are possible now among those which is having the highest weight and that is the one that i will say as the my dependency graph so now there are there are many questions like ah how do i convert a sentence to an initial configuration analogous to what we did in the previous method then the important problem here is how do we define the weights of my edges and once i define the weights how do i choose the maximum spanning tree so these are three different problems and then that's what we will be studying in this lecture and in the next so now for the sentence how do i find the maximum spanning tree so let us see this is the first problem how do i convert the sentence to the initial configuration from where i can start so what is that for each sentence x you define the directed graph g x as v x e x that is given by v x contains and additional load like root and all the all the words that occur in my sentence x and what are my edges i i have all possible edges except for the same node i do not have any self edge from the node to itself but i have edges from every node to every other node except that the word the root node will not have any incoming edges that's why it is written here the edges are from the node zero to n to one to n zero denotes the root node from root there are only outgoing edges and for every other node they have both incoming edges and outgoing edges so that is my g x is a graph where the sentence words and the dummy root symbol are the vertices this is my set of vertices and there is a directed edge between every pair of distinct words yes that's what we have seen here and a directed edge from the root symbol to every word from zero to one to n this is my initial graph so now from a sentence i can construct this initial graph and assume that i have some method of finding out what are the weights of my edges we will discuss this this problem in the next lecture how do i find the weights but for now let us assume that we have some method of finding the weights of my edges so i i obtain a multi digraph now my problem is how do i find the m s t of that multi digraph and for that we use a very very famous algorithm called chu liu edmonds algorithm and that's the very simple algorithm as well so let us see what this algorithm does so very simple steps each vertex in the graph greedily selects the incoming edge with the highest weight ok so for each vertex in the graph i have incoming edges from every other node so what we will do in the fir[st]- what i will do in the first step for each node i will select the incoming edge with the highest weight so now i will now consider only those edges that have been selected i will see whatever graph is resulting is it a tree or not if it is a tree it has to be a maximum spanning tree because each node as related the maximum incoming edge now the problem is if whatever you obtain is not a tree if this is not a tree that means there has to be a cycle now if this is a cycle then there is a step that says you contract the vertices that are involved in the cycle in a single vertex now recalculate the incoming and outgoing edges for all those the for this new vertex that i have constructed rerun the algorithm that is again for each vertex choose the edge with the highest incoming edge again see if the if whatever you have finding is a tree or not if it is a tree you stop otherwise you continue and you can see that you will converge at some point why because at every step i am either finding a maximum spanning tree so i mean stopping or i am finding a cycle if i am finding a cycle i will contract the vertices ok so that means it will reduce the number of vertices that i have in my tree so it at some point i will have only one vertex so that that is the point i will have to stop anyway so this will converge so now again here are many questions like how do i compute the weight for the incoming arcs and outgoing arcs so so let us see by an example so i take the same sentence that we discussed in the previous method also the simple sentence john saw mary and i also know what is the dependency graph that i i want to obtain now how do i start -[ed]monds algorithm so let us see the first thing would be i start by taking all these three words as my nodes plus root as an additional node so here we have root john saw and mary has four different nodes next you you make an edge between every two nodes in the graph so from root you will have only outgoing edges from root you have an edge to saw to john and to mary and for every other pair of words you have an incoming and outgoing edges so from saw to mary and mary to saw saw to john john to saw and so on ok and there are some edge weights and we are not bothering right now and how do we achieve these edge weights so let us see i i i am given the sentence i have some way of finding the edge weights and i complete i construct this initial multi digraph now once i have this this digraph what is the next step of my algorithm the the next or the very first step says that each node in the graph chooses the edge with the maximum so chooses the incoming edge with the maximum weight simple ok so there are only three nodes here that are having incoming edges so let us see what is the edge that i will choose so saw has incoming edge of weight ten twenty and zero so it will have to choose there is with weight twenty similarly john has incoming edge of weight nine thirty and eleven so it will choose the one with weight thirty and mary has thirty nine and three so it will choose thirty and then i will remove all the other edges so i have i will have only three edges in my graph is this is this does the qualifier for the maximum spanning tree or the directed spanning tree it satisfies the first tree first two conditions number of nodes will be same as the original graph and number of edges will be one less than the number of original nodes in the graph so i will now have three edges one for each node as the incoming edge but that condition is there should not be any cycle so let us see do we get a cycle or do we get a tree so if i do that i will get a graph like this because saw selects this edge john select this edge and mary selects this edge so what are you seeing here if there is a cycle so i find a cycle here from john to saw and saw to john so that means so i i i am not done yet i have to now continue my algorithm so what was the next step whenever i find a cycle i contract that i make a single vertex so the idea would be so now i have a root node then john saw mary ok so what do i have found till now twenty thirty thirty ok this is not a tree it is a cycle so what is the next step i will take it i will contract it into a single vertex so there is a word j and s let us let us call it w j s ok this is a single vertex now and i will have to repeat my algorithm for repeating the algorithm i should know to this vertex or to this new vertex w j s what are the incoming and outgoing edges from all the nodes so there are two nodes now so root and mary so from root it will have an incoming edge from mary it will have a incoming edge as well as outgoing edge so question is how do i compute the incoming and outgoing weights from this vertex and for that we have some very different tools how do i compute the outgoing edge weights and how do i compute incoming edge weights so let us see how many i have to compute i have to compute this weight one i have to compute so now let's forgot about this edge i have to compute weight two and i have to compute weight three yes and root to mary will be already there that will not change yes so i have now one two three edges three vertices only and i have to compute these edge weights so how do i do that so so yes so if not a tree you have to identify the cycle and contract that and you have to recalculate the arc weights into and out of the cycle and what is the algorithm for doing that so algorithm is that for outgoing arc weights you take the arc weights that are equal to max of outgoing arcs over all vertices in the cycle what do i mean by this so here is my contracted vertex john and saw i want to compute the outgoing arc weight from this vertex to mary yes so this will be equal to the max of outgoing arcs from john to mary and saw to mary which of these these gives me the maximum will be final ah weight so here let us see from john to mary and saw to mary so john to mary i have a weight of three and saw to mary i have a weight of thirty so among these highest is thirty so i will pick the one with thirty and this is the final graph that is being shown so from this vertex the outgoing edge to mary will have a weight of thirty and that the only outgoing outgoing edge for this contracted vertex this is fine now how do i find out the weight for the incoming arcs so incoming arcs are from root as well as from mary yes so from incoming arc the the algorithm is different i do not choose the now so i have to find out from root to this vertex so i do not directly choose the one that is having the maximum so what i do i have to also consider this the edges inside the inside the tree so what i will do i will take the incoming arc weights as equal to the weights of the best spanning tree that includes the head of the incoming arc and all the nodes in my cycle so what do i mean by that so let's take from root from root there are two different ways of defining incoming arc weights either it has to be root to saw and saw to john or root to john john to saw these are the two possible trees ok so so what i will do i will find out the weight for individual trees and take which one is having the maximum weight so let us say root to saw saw to john this is ten plus thirty forty root to john john to saw this is nine plus twenty twenty nine so i will take the weight as forty and that is the edge weight from root to saw this is having the weight of forty now can you compute the weight from mary to this vertex again i will see the two different ways mary to saw saw to john so this is zero plus thirty choose this thirty second is mary to john john to saw and that is eleven and twenty thirty one so i have two ways thirty and thirty one so i will choose one with thirty one so it is starting from mary to john and john to saw so now once i have computed all these weights i have now got the the new tree on which i have to compute my algorithm so here what did you find this weight is equal to forty this weight we found to thirty and this weight we found as thirty one and this first so now once i have find these weights ah what is the next steps i will have to see if each vertex now selects the incoming arc with the highest weight do we obtain a tree so let us see for this vertex incoming arcs are forty and thirty one so it will choose this arc for this vertex nine and thirty so we choose this arc so what is my ah what is the graph that i am seeing so let me color only the edges by this so one edge is here and the second edge is here yes so do you see it's a tree it's a tree and this is directed spanning tree so am i done so as one point i am done because there is no cycle so i do not have to repeat my algorithm but i still haven't the optimal dependency graph why because i am i am now stuck with an edge from root to this contracted vertex and i do not know what happens inside and i know there is an outgoing edge from this contracted vertex to mary again i want to know what happened inside so how do i construct my full graph and for that you have to go back to how you actually constructed these connections for this contracted vertex so what you will do so the incoming edge from root to john john and saw and the outgoing edge from john saw to mary so let us see how did we compute the outgoing edge we said the outgoing edge should be the maximum of both the outgoing edges so from john to mary and from saw saw to mary and where did these come from this came from saw so i will now see here this edge from saw to mary that may write it thirty ok so this is done so this outgoing edge is from saw not from john that's how we found it out now it is about the incoming edge this an incoming edge could have been from saw then john or john then saw in our algorithm where did it come from forty so it came from root to saw and saw to john yes so i have to construct now root to saw saw to john so root to saw and saw to john ok this was ten and this was thirty and that is my final m s t that is my dependency graph ok so so this is the algorithm so let us see again here so you you are at this step where you have this contracted vertex and you found out the maximum incoming edge for each vertex and you obtain a tree so now you have to go back after your recursive call and we construct the original graph and there you have to find out where is this outgoing edge coming from is it coming from saw or john and you found it is coming from saw incoming edge is it coming for this tree or that is root to saw saw to john or root to john john to saw and that you can again find out where did you find this forty it was from root to saw saw to john so so yes the edge from w j s to mary was from saw so we construct that the edge from root to w j s represents a tree from root to saw saw to john and that is your dependency graph so now there might be a question in your mind that in my algorithm i have different ways of computing incoming arc weights and as well as outgoing arc weights they are not the same so we need them to be different so that we can also account for the weight for the ah connection inside the tree but the question is can i reverse this that is can i say that the outgoing weight should be the maximum of the directed spanning tree and the incoming weight should be the maximum among all the possible incoming weights so i would like you to think about it but i can give you basic intuition that why this is the case so let us see so suppose i have a contracted vertex that has nodes word one and word two so right now what we are doing we are saying the outgoing weight is max of to a vertex like w three it is a max of these two ok now so we take the max here suppose there is another word x w four i will do the same the outgoing weight from here to w four is the max of these two ok fine now when i have taken the max here and i am done my with my call and everything each vertex will choose only one incoming edge weight so w three will choose either this or this w four will choose either this or this or anything else so that that means i will know for sure whether this there is connection from w two to w three or w one to w three or there is no connection and whatever i obtain even if i say that from w one suppose my finally i find out a situation like this that's from w one there are both the connections are there this is valid from a because from a single node you can have two different outgoing edges this is fine or if w one and w two that is also ok in no case there will be a there will be two incoming edges for the same node this is not allowed by the algorithm itself now suppose i change my algorithm and say that the outgoing edge is coming from the directed spanning tree so that will be the situation where i will have to see so this edge is the max of w one to w two to w three and the other one that is w two to w one to w three yes similarly this will be the max of w two to w one to w four and w one to w two to w four fine now what might happened that in your final tree that you obtain you find out this edge yes and this edge ok now you have to go back and construct your tree so what you will see there you will see that this edge is coming from by following this connection and this is coming by following this connection so you will end up by saying ok there is a cycle inside and this will not terminate again ok you can also try to see what will happen in the case of so this is only for the outgoing edges so you see there might be a case where you can end up finding a cycle or may not be able to say which of these two is the correct ah ah sign between the edges so this case might happen this will never arise in the way we have define the algorithm similarly you can try for the incoming edges would you end up with the situation where you you are either ah violating some principle of the dependency graph or where you are getting the cycle and you are not able to converge this is something i will say that you try to take both the cases and see whether you are finding why the algorithm ah proceeds in this way of for finding the incoming and outgoing edge weights so fine so so we discuss this algorithm of chu liu edmonds and how do we use that for finding maximum spanning tree so what we did not cover is how do we find the edge weights ok and that's where the learning algorithm comes in that how do we find the edge weight from my dependency graph and that's what we will see in the next lecture thank you